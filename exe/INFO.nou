REF: https://github.com/jgm/pandoc/issues/2311#issuecomment-335039719
REPL:(haskell->json):
  $ pandoc -f native -t json
  $ pandoc -f markdown -t json -i README.md | jq '' >! readme.json


Grammar parsing
  ++ TRY parglare
    = Arpeggio/textX successor
    https://github.com/igordejanovic/parglare
    http://www.igordejanovic.net/parglare/pglr/
    $ sudo pip install git+https://github.com/igordejanovic/parglare.git
      https://stackoverflow.com/questions/20101834/pip-install-from-git-repo-branch
  ++ parsimonious
    https://github.com/erikrose/parsimonious
    http://zderadicka.eu/writing-simple-parser-in-python/
    |aur/python-parsimonious|
    - no skipping of useless nodes (E.G. <NL>)
    - no joining of nodes (E.G. word+ as single whole line)
  + arppergio
    http://www.igordejanovic.net/Arpeggio/
      https://github.com/igordejanovic/Arpeggio
      https://github.com/igordejanovic/Arpeggio/tree/master/examples
    |aur/python-arpeggio|
    + built-in graphviz diag for syntax
    ~ automatic split on spaces
    ~ no skipping of other useless nodes, beside spaces
      BUT: can suppress them post-factum by "default actions"
  + lrparsing
    http://lrparsing.sourceforge.net/doc/html/
    - too many ambiguities regex/keyword
      << sep lexing and parsing stages
    - bad error messages
  ? parsing
    https://github.com/sprymix/parsing
  waxeye
    https://waxeye.org/
    https://github.com/orlandohill/waxeye
    ++ https://waxeye.org/manual.html
  ply
    http://www.dabeaz.com/ply/
    https://github.com/dabeaz/ply
    |extra/python-ply|
    |community/python-rply|
  plyplus
    https://github.com/erezsh/plyplus
  pyparsing
    https://habrahabr.ru/post/239081/
    http://nbviewer.jupyter.org/urls/gist.githubusercontent.com/tbicr/cd584138ce183839946f/raw/e0c335bd57103e200279302eff3c667d5dd470b1/Pyparsion.ipynb
  OLD: pyPEG
    https://fdik.org/pyPEG/
  plex
    http://www.cosc.canterbury.ac.nz/greg.ewing/python/Plex/1.1.1/doc/Tutorial.html
  catalogue
    https://wiki.python.org/moin/LanguageParsing
    ++ https://tomassetti.me/parsing-in-python/
  manual
    http://effbot.org/zone/simple-top-down-parsing.htm

How to create pragmatic, lightweight languages
  https://leanpub.com/create_languages
  https://tomassetti.me/category/language-engineering/parsing/
  https://tomassetti.me/category/language-engineering/

Iterative grammar design
  + https://softwareengineering.stackexchange.com/questions/107266/how-should-i-specify-a-grammar-for-a-parser
  https://tomassetti.me/parse-tree-abstract-syntax-tree/
  https://stackoverflow.com/questions/9452584/building-a-parser-part-i
  ++ http://jayconrod.com/posts/65/how-to-build-a-parser-by-hand
    => sometimes you need hand-written parser
  https://ivanyu.me/blog/2014/09/13/creating-a-simple-parser-with-antlr/
  https://github.com/PhilippeSigaud/Pegged/wiki/PEG-Basics
  http://leafo.net/guides/parsing-expression-grammars.html


NOTE: PEG is not the best choice
  http://www.igordejanovic.net/2017/08/09/parglare-python-parser.html
  => parglare

HACK
  TUT remove left-recursion
    http://www.igordejanovic.net/Arpeggio/troubleshooting/
      https://en.wikipedia.org/wiki/Left_recursion#Removing_left_recursion

E.G. Grammars
  REF https://github.com/PhilippeSigaud/Pegged/wiki/Extended-PEG-Syntax
  TUT https://github.com/PhilippeSigaud/Pegged/wiki/Grammar-Examples
    https://github.com/PhilippeSigaud/Pegged/blob/master/pegged/examples/json.d
    https://github.com/PhilippeSigaud/Pegged/blob/master/pegged/examples/markdown.d
    https://github.com/jgm/peg-markdown/blob/master/markdown_parser.leg
  Python
    https://docs.python.org/3/reference/grammar.html
